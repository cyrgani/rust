Ok(TokenStream [Literal { kind: Integer, symbol: "123", suffix: None, span: #10 bytes(185..209) }])
Ok(TokenStream [Literal { kind: Str, symbol: "ab", suffix: None, span: #10 bytes(185..209) }])
Ok(TokenStream [Literal { kind: Char, symbol: "b", suffix: None, span: #10 bytes(185..209) }])
Ok(TokenStream [Literal { kind: Char, symbol: "b", suffix: None, span: #10 bytes(185..209) }])
Ok(TokenStream [Literal { kind: Byte, symbol: "b", suffix: None, span: #10 bytes(185..209) }])
Ok(TokenStream [Ident { ident: "c", span: #10 bytes(185..209) }, Literal { kind: Char, symbol: "b", suffix: None, span: #10 bytes(185..209) }])
Ok(TokenStream [Ident { ident: "cr", span: #10 bytes(185..209) }, Literal { kind: Char, symbol: "b", suffix: None, span: #10 bytes(185..209) }])
Ok(TokenStream [Literal { kind: Integer, symbol: "256", suffix: Some("u8"), span: #10 bytes(185..209) }])
Ok(TokenStream [Punct { ch: '-', spacing: Alone, span: #10 bytes(185..209) }, Literal { kind: Integer, symbol: "256", suffix: Some("u8"), span: #10 bytes(185..209) }])
Ok(TokenStream [Literal { kind: Integer, symbol: "0b11111000000001111", suffix: Some("i16"), span: #10 bytes(185..209) }])
Ok(TokenStream [Literal { kind: Integer, symbol: "0xf32", suffix: None, span: #10 bytes(185..209) }])
Ok(TokenStream [Literal { kind: Integer, symbol: "0b0", suffix: Some("f32"), span: #10 bytes(185..209) }])
Ok(TokenStream [Ident { ident: "fn", span: #10 bytes(185..209) }, Ident { ident: "main", span: #10 bytes(185..209) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #10 bytes(185..209) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: "println", span: #10 bytes(185..209) }, Punct { ch: '!', spacing: Alone, span: #10 bytes(185..209) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { kind: Str, symbol: "Hello, world!", suffix: None, span: #10 bytes(185..209) }], span: #10 bytes(185..209) }], span: #10 bytes(185..209) }])
Err(LexError("cannot parse string into token stream: unexpected closing delimiter: `)`"))
Err(LexError("cannot parse string into token stream: unexpected closing delimiter: `]`"))
Ok(TokenStream [Literal { kind: ErrWithGuar, symbol: "0b2", suffix: None, span: #10 bytes(185..209) }])
Ok(TokenStream [Literal { kind: ErrWithGuar, symbol: "0b", suffix: Some("f32"), span: #10 bytes(185..209) }])
Ok(TokenStream [Literal { kind: ErrWithGuar, symbol: "0b0.0", suffix: Some("f32"), span: #10 bytes(185..209) }])
